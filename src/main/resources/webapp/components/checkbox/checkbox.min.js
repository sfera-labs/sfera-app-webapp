/*! sfera-webapp - v0.0.2 */

Sfera.Doc.add.component("Checkbox",{doc:{descr:"Checkbox component, used to represent a boolean value.\nIts appearance is defined by a [style](#style) attribute."},attr:{focus:{descr:"Focus the element"},label:{descr:"Specifies the label's text"},value:{descr:"Specifies the checkbox's value"},fontSize:{descr:"Specifies the font size in pixels"},fontColor:{descr:"Specifies the font color"},changeDelay:{descr:"Specifies the milliseconds before a change of value is noticed"},onKeyUp:{descr:"Script to be run on key up event"},onChange:{descr:"Script to be run when a change in value is detected. Variables id and value can be used.",example:{descr:"When a change is detected (based on the changeDelay attribute) an alert will display the current value",values:{x:10,y:10,onChange:"alert(id+' changed. Current value: '+value)"}}},onEnter:{descr:"Script to be run when the enter key is pressed"},onFocus:{descr:"Script to be run when the field gains focus"},onBlur:{descr:"Script to be run when the field loses focus"}}}),Sfera.Components.create("Checkbox",{"extends":"_Field",attributes:{width:{"default":20,update:function(){this.component.elements.button&&(this.component.elements.button.style.width=this.value+"px")}},height:{"default":20,update:function(){this.component.elements.button&&(this.component.elements.button.style.height=this.value+"px")}},focus:{type:"boolean",update:function(){this.value&&this.component.focus()}},label:{type:"string","default":"",update:function(){var a=this.component,b=a.subComponents.label;b.setAttribute("label",this.value),this.value?a.elements.label.style.display="":a.elements.label.style.display="none"}},value:{type:"boolean",update:function(){this.component.redraw()}},changeDelay:{type:"integer","default":"200"},fontSize:{type:"integer",update:function(){this.component.subComponents.label.setAttribute("fontSize",this.value)}},fontColor:{update:function(){this.component.subComponents.label.setAttribute("fontColor",this.value)}},style:{update:function(){var a=this.component;a.redraw()}},onKeyUp:{type:"js"},onChange:{type:"js","default":"event(id,value)"},onEnterKey:{type:"js"},onFocus:{type:"js"},onBlur:{type:"js"}},init:function(){this.value="",this.changeTimeout=null,this.elements=Sfera.Utils.getComponentElements(this.element,!0,this.elements),this.btObj=new Sfera.UI.Button(this.element,{onclick:this.onClick.bind(this)})},focus:function(){this.onFocus()},blur:function(){this.onBlur()},redraw:function(){var a=this.getAttribute("style");this.elements.container.className="container "+(a?" style_"+a:"")+" "+(this.getAttribute("value")?"on":"off")},updateClass:function(){this.btObj.focus(this.focused),this.btObj.enable(this.getAttribute("enabled"))},clearChangeTimeout:function(){this.changeTimeout&&(clearTimeout(this.changeTimeout),this.changeTimeout=null)},onChangedTimeout:function(){this.clearChangeTimeout();var a=this.getAttribute("onChange"),b=this.getAttribute("value");Sfera.Custom.exec(a,this.id,b)},flip:function(){this.setAttribute("value",!this.getAttribute("value")),this.onChange()},onClick:function(){var a=this.getAttribute("onClick"),b=!0;if(a){var c=this.getAttribute("value");b=Sfera.Custom.exec(a,this.id,c)}b!==!1&&(this.focus(),this.flip())},onKeyDown:function(a){var b=a.keyCode,c=Sfera.Utils.getKeyFromCode(b);return"enter"!=c||this.onEnter()||(c=""),"tab"==c?(this.onChangedTimeout(),Sfera.client.focusNext(a.shiftKey),"enter"==c&&this.blur(),!1):("space"!=c&&"enter"!=c||this.flip(),this.onChange(),!0)},onKeyPress:function(a){var b=a.keyCode;Sfera.Utils.getKeyFromCode(b);return this.onChange(),!0},onKeyUp:function(a){var b=a.keyCode,c=Sfera.Utils.getKeyFromCode(b);return"enter"!=c&&"tab"!=c?(this.onChange(),!1):!0},onChange:function(){this.clearChangeTimeout();var a=this.getAttribute("changeDelay"),b=this;a?this.changeTimeout=setTimeout(function(){b.onChangedTimeout()},a):b.onChangedTimeout()},onEnterKey:function(){var a=this.getAttribute("onEnterKey");return a?Sfera.Custom.exec(a):!0},onFocus:function(){Sfera.client.setFocused(this),this.focused=!0,this.updateClass()},onBlur:function(){this.onChange(),Sfera.client.clearFocused(this),this.focused=!1,this.updateClass()},onShow:function(){this.getAttribute("focus")&&this.focus()},onHide:function(){}});