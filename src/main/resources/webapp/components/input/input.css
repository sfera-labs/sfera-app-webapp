.component.comp_input {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  box-sizing: border-box;
  height: auto; }
  .component.comp_input.focused {
    z-index: 10; }
  .component.comp_input .container {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box;
    display: table;
    width: 100%; }
    .component.comp_input .container textarea {
      padding: 3px 4px 2px; }
    .component.comp_input .container.style_default .icon {
      padding-left: 4px; }
    .component.comp_input .container.style_default .field {
      color: black; }
    .component.comp_input .container.style_default input {
      padding: 0 4px; }
    .component.comp_input .container.style_default .erase {
      padding-right: 4px; }
    .component.comp_input .container.style_strict .edit {
      -webkit-border-radius: 4px;
      -moz-border-radius: 4px;
      border-radius: 4px;
      padding: 0 4px; }
    .component.comp_input .container.style_strict .field {
      color: black; }
    .component.comp_input .container::after {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      z-index: -1;
      width: 100%;
      height: 100%;
      opacity: 0;
      transition: opacity 0.3s ease-in-out; }
    .component.comp_input .container.error {
      animation: shake 0.5s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
      transform: translate3d(0, 0, 0);
      backface-visibility: hidden;
      perspective: 1000px;
      /* The fast way */
      -webkit-box-shadow: none;
      -moz-box-shadow: none;
      box-shadow: none;
      /* Pre-render the bigger shadow, but hide it */ }
      .component.comp_input .container.error::after {
        opacity: 1; }
@keyframes shake {
  10%,
            90% {
    transform: translate3d(-1px, 0, 0); }
  20%,
            80% {
    transform: translate3d(2px, 0, 0); }
  30%,
            50%,
            70% {
    transform: translate3d(-3px, 0, 0); }
  40%,
            60% {
    transform: translate3d(3px, 0, 0); } }
  .component.comp_input .icon {
    display: table-cell;
    vertical-align: middle;
    min-width: 2px;
    width: 20px;
    height: 100%;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box;
    padding-right: 4px; }
  .component.comp_input .edit {
    display: table-cell;
    vertical-align: middle;
    min-width: 2px;
    width: 100%;
    height: 100%;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box; }
  .component.comp_input .field {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%;
    overflow: auto;
    border: none;
    background: none;
    -webkit-appearance: none;
    -webkit-writing-mode: horizontal-tb; }
  .component.comp_input .erase {
    display: table-cell;
    vertical-align: middle;
    padding-left: 4px;
    color: red;
    width: 10px;
    min-width: 2px;
    height: 100%;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    box-sizing: border-box; }

input[type=password],
input[type=text],
input[type=textarea] {
  user-select: text;
  -moz-user-select: text;
  -khtml-user-select: text;
  -webkit-user-select: text;
  -ms-user-select: text; }

input {
  -webkit-appearance: textfield;
  background-color: white;
  border-image-source: initial;
  border-image-slice: initial;
  border-image-width: initial;
  border-image-outset: initial;
  border-image-repeat: initial;
  -webkit-rtl-ordering: logical;
  -webkit-user-select: text;
  cursor: auto;
  padding: 1px; }

input:focus,
select:focus,
textarea:focus {
  outline: none; }

textarea {
  resize: none; }

input,
select,
textarea {
  padding: 1px;
  border: none;
  outline: 0;
  margin: 0;
  font: normal 13px/100% Verdana, Tahoma, sans-serif;
  width: 200px;
  background: #fff; }

/*# sourceMappingURL=input.css.map */
